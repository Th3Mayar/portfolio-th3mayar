---
import Item from "@/components/molecule/Item.vue";
import { useTranslations, getLangFromUrl } from "@/i18n/utils";

let lang = getLangFromUrl(Astro.url);
// Si la ruta es '/', redirigir visualmente a '/en' para el header
if (Astro.url.pathname === '/') {
  lang = 'en';
}
const { common: TCommon } = useTranslations(lang);
const { components: TComponents } = TCommon;

import Toggle from "@/components/atoms/Toggle.vue";
---

<header>
  <nav class="z-50">
    <div class="header-left">
      <Item title={TComponents.name} class="link-card" />
    </div>
    <div class="header-right">
      <Toggle class="toggle">
        <section class="popup-window">
          <Item
            href=`/${lang}/`
            title={TComponents.hello}
            class="custom-item first"
          />
          <Item
            href=`/${lang}/about`
            title={TComponents.aboutMe}
            class="custom-item"
          />
          <Item
            href=`/${lang}/projects`
            title={TComponents.projects}
            class="custom-item"
          />
          <Item
            href=`/${lang}/contacts`
            title={TComponents.contactMe}
            class="custom-item"
          />
        </section>
      </Toggle>
    </div>
    <ul v-if="isMenuOpen" class="items">
      <Item
        href=""
        title={TComponents.name}
        class="item-name link-card"
        classLink="!justify-start !items-start"
      />
      <Item
        href={`/${lang}/`}
        title={TComponents.hello}
        class={[
          "item-hello link-card item",
          (Astro.url.pathname === `/${lang}/` || Astro.url.pathname === '/' || Astro.url.pathname === `/`) ? "active" : "",
        ].join(" ")}
      />
      <Item
        href={`/${lang}/about`}
        title={TComponents.aboutMe}
        class={[
          "item-about link-card item",
          Astro.url.pathname === `/${lang}/about` ? "active" : "",
        ].join(" ")}
      />
      <Item
        href={`/${lang}/projects`}
        title={TComponents.projects}
        class={[
          "item-projects link-card item",
          Astro.url.pathname === `/${lang}/projects` ? "active" : "",
        ].join(" ")}
      />
      <li class="item-hidden">{/* <LightDark  /> */}</li>
      <Item
        href={`/${lang}/contacts`}
        title={TComponents.contactMe}
        class={[
          "item-contact link-card item",
          Astro.url.pathname === `/${lang}/contacts` ? "active" : "",
        ].join(" ")}
      />
    </ul>
  </nav>
</header>

<script>
  // @ts-ignore
  (function () {
    const nav = document.querySelector("nav");
    if (!nav) return;

    const items = nav.querySelectorAll("ul.items .item");

    if (!items || items.length === 0) return;

    let hoverCount = 0;
    function onEnter(e) {
      const el = e.currentTarget;
      if (el.classList.contains("active")) return;
      hoverCount++;
      nav.classList.add("others-hover");
    }

    function onLeave(e) {
      const el = e.currentTarget;
      if (el.classList.contains("active")) return;
      hoverCount = Math.max(0, hoverCount - 1);
      if (hoverCount === 0) {
        nav.classList.remove("others-hover");
      }
    }

    items.forEach((item) => {
      item.addEventListener("mouseenter", onEnter);
      item.addEventListener("mouseleave", onLeave);
      item.addEventListener("touchstart", onEnter);
      item.addEventListener("touchend", onLeave);
    });

    // @ts-ignore
    window.__navHoverCleanup = () => {
      items.forEach((item) => {
        item.removeEventListener("mouseenter", onEnter);
        item.removeEventListener("mouseleave", onLeave);
        item.removeEventListener("touchstart", onEnter);
        item.removeEventListener("touchend", onLeave);
      });
      nav.classList.remove("others-hover");
    };
  })();
</script>

<style>
  .item:not(:first-child) {
    border-left: 2px solid var(--border);
  }

  .item-projects {
    border-right: 2px solid var(--border);
  }
  ul {
    text-align: center;
    display: grid;
    grid-template-columns: repeat(10, 1fr);
  }

  nav {
    display: grid;
    align-items: center;
    border-bottom: 2px solid var(--border);
    grid-template-rows: 1fr;
  }

  .menu-toggle {
    display: none;
  }

  .header-left {
    display: none;
  }

  .header-right {
    display: flex;
    align-items: center;
  }

  .item-name {
    padding: 1rem;
    justify-content: flex-start;
    text-align: start;
    grid-column: span 2;
  }

  .item-hello:hover,
  .item-about:hover,
  .item-projects:hover,
  .item-contact:hover {
    border-bottom: 4px solid var(--orangeHover);
    margin-bottom: -4px;
    width: 100%;
    z-index: 999;
  }

  .item-contact {
    justify-content: end;
    grid-column: span 2;
    text-align: center;
  }

  .active {
    border-bottom: 4px solid var(--orangeHover, #f59e42);
    margin-bottom: -4px;
    width: 100%;
    z-index: 999;
  }

  .item-hidden {
    grid-column: span 3;
    align-items: center;
    justify-content: center;
    padding: 10px;
  }
  .item-hidden:hover {
    border: none;
  }

  .toggle {
    display: none;
  }

  button:nth-child(2) {
    display: none;
  }

  .custom-item {
    padding: 1rem 0 1rem 1rem;
  }

  ul.items .item {
    transition:
      opacity 180ms ease,
      transform 160ms ease,
      border-bottom-color 160ms ease;
  }

  nav.others-hover ul.items .item:not(:hover) {
    opacity: 0.45;
    transform: translateY(0);
    pointer-events: none;
    border-color: var(--border);
  }

  nav.others-hover ul.items .item:hover {
    opacity: 1;
    border-bottom: 4px solid var(--orangeHover);
    margin-bottom: -4px;
    z-index: 1000;
  }

  nav.others-hover ul.items .active {
    opacity: 0;
  }

  @media (max-width: 926px) {
    .toggle {
      display: flex;
    }
    .menu-toggle {
      display: flex;
      gap: 5px;
    }

    ul {
      display: none;
      flex-direction: column;
      gap: 2rem;
    }

    ul.v-if {
      display: flex;
    }

    .header-name {
      display: flex;
      justify-content: flex-start;
      width: max-content;
    }

    .header-icon {
      display: flex;
      justify-content: flex-end;
      width: auto;
    }

    nav {
      display: flex;
      padding: 1rem;
      justify-content: space-between;
      align-items: center;
    }

    .header-left {
      display: flex;
      align-items: center;
    }
  }

  @media (max-width: 1387px) {
    ul.items {
      grid-template-columns: repeat(8, 1fr);
    }

    .item-hidden {
      grid-column: span 1;
    }

    .item-contact {
      grid-column: span 2;
      text-align: center;
    }
  }

  @media (max-width: 1230px) {
    ul.items {
      grid-template-columns: repeat(6, 1fr);
    }
    .item-hidden {
      display: none;
    }

    .item-contact {
      grid-column: span 2;
      text-align: center;
    }

    .item-about {
      grid-column: span 2;
    }
  }
  @media (max-width: 1507px) {
    ul.items {
      grid-template-columns: repeat(8, 1fr);
    }
    .item-hidden {
      grid-column: span 1;
    }

    .item-contact {
      grid-column: span 2;
      text-align: center;
    }
  }
</style>

<script>
  document.addEventListener("click", (e: Event) => {
    const target = e.target as HTMLElement;
    const link = target.closest("a") as HTMLAnchorElement;

    if (link && link.href) {
      // Show loader immediately on click
      if ((window as any).showLoader) {
        (window as any).showLoader();
      }
    }
  });

  // Handle browser back/forward buttons
  window.addEventListener("popstate", () => {
    // Let Astro handle it
  });
</script>
